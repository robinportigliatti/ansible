# ansible/roles/postgresql/tasks/install_manager.yml
---
  - name: "Adding postgres key"
    apt_key:
      url: "{{ postgresql_repository_signing_key_url }}"
      state: "present"

  - name: "Adding postgres repo"
    apt_repository:
      filename: "{{ postgresql_repository_list_name }}"
      repo: "deb {{ postgresql_repository }} {{ ansible_distribution_release }}-{{ postgresql_repository_list_name }} main"
      state: "present"

  # apt-get update lancé par le module apt_repository précédent
  - name: "Install postgresql packages"
    apt:
      name: "{{ postgresql_packages }}"

  - name: Check if PostgreSQL database is initialized.
    stat:
      path: "{{ postgresql_pgdata_main_directory }}/PG_VERSION"
    register: pgdata_dir_pg_drop

  - name: "Dropping automatic installed cluster"
    command: "pg_dropcluster {{ postgresql_version }} main --stop"
    register: command_result
    failed_when: "'This cluster is still running' in command_result.stderr"
    when: not pgdata_dir_pg_drop.stat.exists

  - name: "Creating PGDATA directory"
    file:
      state: directory
      path: "{{ postgresql_pgdata_main_directory }}"
      owner: "{{ postgresql_sys_user }}"
      group: "{{ postgresql_sys_group }}"
      mode: "1700"

  - name: Check if PostgreSQL database is initialized.
    stat:
      path: "{{ postgresql_pgdata_main_directory }}/PG_VERSION"
    register: pgdata_dir_version

  - name: "Configure .bash_profile"
    template:
      src: ".bash_profile.j2"
      dest: "/var/lib/postgresql/.bash_profile"
      owner: "{{ postgresql_sys_user }}"
      group: "{{ postgresql_sys_group }}"
      mode: "0700"

  - name: "Configure .bashrc"
    template:
      src: ".bashrc.j2"
      dest: "/var/lib/postgresql/.bashrc"
      owner: "{{ postgresql_sys_user }}"
      group: "{{ postgresql_sys_group }}"
      mode: "0700"

  - name: "Launching initdb"
    command: "pg_createcluster {{ postgresql_version }} main -d {{ postgresql_pgdata_main_directory }}"
    when: not pgdata_dir_version.stat.exists
    vars:
      ansible_ssh_pipelining: "true"

  - name: Move foo to bar
    command: "mv /etc/postgresql/{{ postgresql_version }}/main/{{ postgresql_cluster_directory }} {{ postgresql_pgdata_main_directory }}/{{ postgresql_cluster_directory }}"
    with_items:
      - "pg_ident.conf"
      - "postgresql.conf"
      - "pg_hba.conf"
    loop_control:
      loop_var: postgresql_cluster_directory
    ignore_errors: yes

  - name: "Check if {{ postgresql_pgbackup_directory }} exists"
    stat:
      path: "{{ postgresql_pgbackup_directory }}"
    register: pgbackup_dir_exists

  - name: "Creating backups directories in {{ postgresql_pgbackup_directories }}"
    file:
      state: directory
      path: "{{ current_postgresql_backup_directory }}"
      owner: "{{ postgresql_sys_user }}"
      group: "{{ postgresql_sys_group }}"
      mode: "1755"
    when: pgbackup_dir_exists.stat.exists
    with_items:
      - "{{ postgresql_pgbackup_directories }}"
    loop_control:
      loop_var: current_postgresql_backup_directory

  - name: "Check if {{ postgresql_pgdata_directory }} exists"
    stat:
      path: "{{ postgresql_pgdata_directory }}"
    register: pgbackup_dir_exists

  - name: "Creating maintenance directories in {{ postgresql_pgdata_directory }}"
    file:
      state: "directory"
      path: "{{ current_postgresql_maintenance_directory }}"
      owner: "{{ postgresql_sys_user }}"
      group: "{{ postgresql_sys_group }}"
      mode: "1755"
    when: pgbackup_dir_exists.stat.exists
    with_items:
      - "{{ postgresql_maintenance_directories }}"
    loop_control:
      loop_var: current_postgresql_maintenance_directory

  - name: "Creating symlinks"
    file:
      state: "link"
      src: "{{ current_postgresql_symlink.src }}"
      path: "{{ current_postgresql_symlink.path }}"
      owner: "{{ postgresql_sys_user }}"
      group: "{{ postgresql_sys_group }}"
      mode: "700"
    with_items:
      - "{{ postgresql_symlinks }}"
    loop_control:
      loop_var: current_postgresql_symlink
    ignore_errors: yes

  - import_tasks: conf_manager.yml
    when: postgresql_global_config_options is defined

  - name: "restart postgresql"
    service:
      name: "postgresql"
      state: "restarted"
